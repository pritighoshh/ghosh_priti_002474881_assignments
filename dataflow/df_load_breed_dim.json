{
	"name": "df_load_breed_dim",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_snowflake_stage_spl",
						"type": "DatasetReference"
					},
					"name": "sourcesnowflakestaging"
				},
				{
					"dataset": {
						"referenceName": "ls_dim_breed",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ls_dim_breed",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "sourcedatawithsk"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     DI_JobID as string",
				"}",
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_S_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_CREATED_DATE as string,",
				"          DI_JOB_ID as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourcesnowflakestaging",
				"source(output(",
				"          MAXBREEDSK as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(BREED_SK),0) as MaxBreedSK FROM DEMO7370.BREED_DIM',",
				"     format: 'query') ~> source1",
				"sourcesnowflakestaging, source1 join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> sourcedatawithsk",
				"sourcedatawithsk aggregate(groupBy(SPECIES,",
				"          PRIMARY_BREED,",
				"          SECONDARY_BREED,",
				"          MAXBREEDSK),",
				"     LICENSE_NUMBER = count(LICENSE_NUMBER)) ~> aggregate1",
				"aggregate1 keyGenerate(output(rownum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(DI_CreatedDate = toString(currentDate(),'yyyy-MM-dd'),",
				"          DI_JobID = $DI_JobID,",
				"          BREEDSK = MAXBREEDSK+rownum) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BREED_SK as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          SPECIES_NAME as string,",
				"          DI_CREATED_DT as string,",
				"          DI_JOB_ID as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          SPECIES_NAME = SPECIES,",
				"          PRIMARY_BREED_NAME = PRIMARY_BREED,",
				"          SECONDARY_BREED_NAME = SECONDARY_BREED,",
				"          DI_CREATED_DT = DI_CreatedDate,",
				"          DI_JOB_ID = DI_JobID,",
				"          BREED_SK = BREEDSK",
				"     )) ~> sink1"
			]
		}
	}
}